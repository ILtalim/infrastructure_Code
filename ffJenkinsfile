pipeline {
    agent any
    tools {
        terraform 'terraform'
    }
    parameters {
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
    }
    triggers {
        pollSCM('* * * * *') // Runs every minuite
    }
    // environment {
    //     SLACKCHANNEL = '16th-june-ecommerce-project-using-kops-eu-team1' //MY CHANNEL ID
    //     SLACKCREDENTIALS = credentials('slack')
    // }
    
    stages {
        stage('IAC Scan') {
            steps {
                script {
                    // sh 'pip install pipenv'
                    sh 'pip install checkov'
                    def checkovStatus = sh(script: 'checkov -d . -o cli --output-file checkov-results.txt --quiet', returnStatus: true)
                    junit allowEmptyResults: true, testResults: 'checkov-results.txt' 
                }
            }
        }
        stage('Terraform Init') {  // Fixed spelling
            steps {
                sh 'terraform init'
            }
        }
        stage('Terraform format') {
            steps {
                sh 'terraform fmt --recursive'
            }
        }
        stage('Terraform validate') {
            steps {
                sh 'terraform validate'
            }
        }
        stage('Terraform plan') {
            steps {
                sh 'terraform plan'
            }
        }
        stage('Terraform action') {
            steps {
                script {
                    sh "terraform ${action} -auto-approve"
                }
            }
        }
    }
    // post {
    //     always {
    //         script {
    //             slackSend(
    //                 channel: SLACKCHANNEL,
    //                 color: currentBuild.result == 'SUCCESS' ? 'good' : 'danger',
    //                 message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) has been completed."
    //             )
    //         }
    //     }
    //     failure {
    //         slackSend(
    //             channel: SLACKCHANNEL,
    //             color: 'danger',
    //             message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' has failed. Check console output at ${env.BUILD_URL}."
    //         )
    //     }
    //     success {
    //         slackSend(
    //             channel: SLACKCHANNEL,
    //             color: 'good',
    //             message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' completed successfully. Check console output at ${env.BUILD_URL}."
    //         )
    //     }
    // }
}


pipeline {
    agent any
    environment {
        DOCKER_IMAGE_NAME = 'softnet/user-service'
        CONTAINER_NAME = 'user-service'
    }
    stages {
        stage('checkout') {
            steps {
                git branch: 'production', credentialsId: 'softnet-dev-test', url: 'https://chisom_amalu@bitbucket.org/softnet-dev/birs-user-service.git'
            }
        }
        stage('Deploy Into Docker Host') {
            steps {
                sshagent(['jenkins-key']) {
                    sh """
                        ssh -t -t ubuntu@54.198.83.33 -o strictHostKeyChecking=no "mkdir /home/ubuntu/birs-service-ci-cd"
                        scp -o strictHostKeyChecking=no -r /var/lib/jenkins/workspace/birs-service-ci-cd/* ubuntu@54.198.83.33:/home/ubuntu/birs-service-ci-cd
                       """
                }
            }
        }
        stage('Stop and Remove Custom User Service') {
            steps {
                sshagent(['jenkins-key']) {
                    sh """
                        ssh -t -t ubuntu@54.198.83.33 -o strictHostKeyChecking=no "docker stop ${CONTAINER_NAME}"
                        ssh -t -t ubuntu@54.198.83.33 -o strictHostKeyChecking=no "docker rm ${CONTAINER_NAME}"
                       """
                }
            }
        }
        stage('Remove Custom User Service Image') {
            steps {
                sshagent(['jenkins-key']) {
                    sh """
                        ssh -t -t ubuntu@54.198.83.33 -o strictHostKeyChecking=no "docker rmi ${DOCKER_IMAGE_NAME}"
                       """
                }
            }
        }
        stage('Build Custom User Service Image') {
            steps {
                sshagent(['jenkins-key']) {
                    sh """
                        ssh -t -t ubuntu@54.198.83.33 -o strictHostKeyChecking=no "docker build -t ${DOCKER_IMAGE_NAME} ./birs-service-ci-cd"
                       """
                }
            }
        }
        stage('Start Custom User Service') {
            steps {
                sshagent(['jenkins-key']) {
                    sh """
                        ssh -t -t ubuntu@54.198.83.33 -o strictHostKeyChecking=no "docker run -d -p 9004:9004 --network=mynetwork --name ${CONTAINER_NAME} \
                            -e SERVER_PORT=9004 \
                            -e POSTGRES_USER=db_admin \
                            -e DATABASE_NAME=birs_user_service-test \
                            -e PORT=9004 \
                            -e DATABASE_HOST=birs-prod-db.c8ejzpkrvqyk.eu-central-1.rds.amazonaws.com \
                            -e DATABASE_PORT=5432 \
                            -e POSTGRES_PASSWORD=kghRdRaFT9ttGyblKLEbtkj3xxjOtqB \
                            -e POSTGRES_DB=birs_data \
                            -e DATABASE_URL=jdbc:postgresql://birs-prod-db.c8ejzpkrvqyk.eu-central-1.rds.amazonaws.com:5432/birs_data \
                            -e APPLICATION_NAME=user-service \
                            -e DATABASE_USER=db_admin \
                            ${DOCKER_IMAGE_NAME}.${BUILD_NUMBER}"
                    """
                }
            }
        }
    }
}